{"version":3,"sources":["apiCalls.js","components/NavBar/NavBar.js","components/Card/Card.js","components/Options/Options.js","components/Quote/Quote.js","components/Character/Character.js","components/Characters/Characters.js","components/QuoteCard/QuoteCard.js","components/CharacterQuotes/CharacterQuotes.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["getCharacterQuotes","characterId","fetch","method","headers","Accept","Authorization","then","response","json","NavBar","exact","to","className","Card","name","validateAnswer","id","onClick","event","target","Options","data","cards","map","character","_id","race","gender","realm","birthday","birth","Quote","allCharacters","useState","setCharacter","quotes","setQuotes","randomQuote","setRandomQuote","loading","setLoading","setResponse","error","setError","useEffect","length","randomCharacter","Math","floor","random","docs","catch","err","finally","setTimeout","window","location","reload","propTypes","PropTypes","array","Character","Characters","characters","characterCards","QuoteCard","dialog","CharacterQuotes","hero","quoteCards","quote","App","setAllCharacters","console","log","path","render","src","alt","match","find","params","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","router","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5c3dbaf6.chunk.js","sourcesContent":["export const getAllCharacters = () => {\n\n  return fetch(`https://the-one-api.dev/v2/character?name=Gandalf,Frodo%20Baggins,Aragorn%20II%20Elessar,Legolas,Arwen,Galadriel,Gimli,Boromir,Bilbo%20Baggins,Samwise%20Gamgee,Gollum,Saruman,Peregrin%20Took,Meriadoc%20Brandybuck,Elrond,Théoden,Faramir,Éowyn`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Bearer Qdwh7zeW6AgFOOGNGAr4\",\n    },\n  }).then((response) => response.json());\n};\n\nexport const getCharacterQuotes = (characterId) => {\n  return fetch(`https://the-one-api.dev/v2/character/${characterId}/quote`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Bearer Qdwh7zeW6AgFOOGNGAr4\",\n    },\n  }).then((response) => response.json());\n};\n","import React from \"react\";\nimport \"./NavBar.css\";\nimport { NavLink } from \"react-router-dom\";\n\nconst NavBar = () => {\n  return (\n    <nav>\n      <NavLink exact to=\"/\" className=\"nav-link home\">\n        Home\n      </NavLink>\n      <NavLink exact to=\"/trivia\" className=\"nav-link trivia\">\n        Quote Trivia\n      </NavLink>\n      <NavLink exact to=\"/heroes\" className=\"nav-link heroes\">\n        Heroes\n      </NavLink>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Card.css\";\n\nconst Card = ({ name, validateAnswer }) => {\n  return (\n    <button\n      className=\"card\"\n      id={name}\n      onClick={(event) => validateAnswer(event.target.id)}\n    >\n      {name}\n    </button>\n  );\n};\n\nexport default Card;\n\nCard.propTypes = {\n  name: PropTypes.string,\n  validateAnswer: PropTypes.func,\n};\n","import React from \"react\";\nimport Card from \"../Card/Card\";\nimport \"./Options.css\";\nimport PropTypes from \"prop-types\";\n\nconst Options = ({ data, validateAnswer }) => {\n  let cards = data.map((character) => {\n    return (\n      <Card\n        name={character.name}\n        key={character._id}\n        id={character._id}\n        race={character.race}\n        gender={character.gender}\n        realm={character.realm}\n        birthday={character.birth}\n        validateAnswer={validateAnswer}\n      />\n    );\n  });\n\n  return <div className=\"options-container\">{cards}</div>;\n};\n\nexport default Options;\n\nOptions.propTypes = {\n  data: PropTypes.array,\n  validateAnswer: PropTypes.func,\n};\n","import { useEffect, useState } from \"react\";\nimport \"./Quote.css\";\nimport { getCharacterQuotes } from \"../../apiCalls.js\";\nimport Options from \"../Options/Options\";\nimport PropTypes from \"prop-types\";\n\nconst Quote = ({ allCharacters }) => {\n  const [character, setCharacter] = useState({});\n  const [quotes, setQuotes] = useState([]);\n  const [randomQuote, setRandomQuote] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [response, setResponse] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    setLoading(true);\n\n    if (allCharacters.length) {\n      let randomCharacter =\n        allCharacters[Math.floor(Math.random() * allCharacters.length)];\n      setCharacter(randomCharacter);\n    }\n  }, [allCharacters]);\n\n  useEffect(() => {\n    if (character) {\n      getCharacterQuotes(character._id)\n        .then((data) => setQuotes(data.docs))\n        .catch((err) => {\n          setError(`trouble loading character...`);\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [character]);\n\n  useEffect(() => {\n    if (quotes.length && !randomQuote) {\n      setRandomQuote(quotes[0][\"dialog\"]);\n    }\n  }, [quotes, randomQuote]);\n\n  const validateAnswer = (id) => {\n    if (id === character.name) {\n      setResponse(\"Well done, that's correct\");\n    } else {\n      setResponse(`Actually, that was ${character.name}`);\n    }\n    setTimeout(function () {\n      window.location.reload();\n    }, 3000);\n  };\n\n  return (\n    <div className=\"quote-container\">\n      {error && <h2 className=\"error-msg\">{error}</h2>}\n      {loading && <h2 className=\"load-msg\">loading quote...</h2>}\n      {quotes.length && (\n        <div>\n          {!response && <h2 className=\"who\">Who said the words...</h2>}\n          {response && <h2 className=\"response\">{response}</h2>}\n          <h2 className=\"quote-text\">{randomQuote}</h2>\n          <div className=\"character-guesses\">\n            <Options\n              data={allCharacters}\n              validateAnswer={validateAnswer}\n            ></Options>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Quote;\n\nOptions.propTypes = {\n  allCharacters: PropTypes.array,\n};\n","import React from \"react\";\nimport \"./Character.css\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\n\nconst Character = ({ name, race, gender, realm, birth }) => {\n  if (!name) {\n    return <h2>We are having trouble fetching that information</h2>;\n  }\n  return (\n    <Link to={`/heroes/${name}`}>\n      <div className=\"character card\" id={name}>\n        <p className=\"name\">{name}</p>\n        {race && <p>race: {race}</p>}\n        {gender && <p>gender: {gender}</p>}\n        {realm && <p>realm: {realm}</p>}\n        {birth && <p>birth: {birth}</p>}\n      </div>\n    </Link>\n  );\n};\n\nexport default Character;\n\nCharacter.propTypes = {\n  name: PropTypes.string,\n  race: PropTypes.string,\n  gender: PropTypes.string,\n  realm: PropTypes.string,\n  birth: PropTypes.string,\n  wikiUrl: PropTypes.string,\n};\n","import React from \"react\";\nimport Character from \"../Character/Character\";\nimport PropTypes from \"prop-types\";\nimport \"./Characters.css\";\n\nconst Characters = ({ characters }) => {\n  const characterCards = characters.map((character) => {\n    if (!characters.length) {\n      return <h2 className=\"error-msg\">trouble loading characters...</h2>;\n    }\n\n    return (\n      <Character\n        key={character._id}\n        id={character._id}\n        name={character.name}\n        race={character.race}\n        gender={character.gender}\n        realm={character.realm}\n        birthday={character.birth}\n      ></Character>\n    );\n  });\n\n  return (\n    <div>\n      <h2 className=\"click-here\">Click a hero to see all their words</h2>\n      <div className=\"characters-container\">{characterCards}</div>\n    </div>\n  );\n};\n\nexport default Characters;\n\nCharacters.propTypes = {\n  characters: PropTypes.array,\n};\n","import React from \"react\";\nimport \"./QuoteCard.css\";\n\nconst QuoteCard = ({ dialog, id }) => {\n  return (\n    <div className=\"quote-card\" key={id}>\n      <h2>{dialog}</h2>\n    </div>\n  );\n};\n\nexport default QuoteCard;\n","import { useEffect, useState } from \"react\";\nimport { getCharacterQuotes } from \"../../apiCalls.js\";\nimport QuoteCard from \"../QuoteCard/QuoteCard\";\nimport \"./CharacterQuotes.css\";\n\nconst CharacterQuotes = ({ hero }) => {\n  const [quotes, setQuotes] = useState([]);\n  const [error, setError] = useState([]);\n\n  useEffect(() => {\n    if (!quotes.length) {\n      getCharacterQuotes(hero._id).then((data) => setQuotes(data.docs));\n    }\n  }, [quotes, hero._id]);\n\n  if (!hero) {\n    setError(\"We are having trouble loading quotes\");\n  }\n\n  if (quotes.length) {\n    let quoteCards = quotes.map((quote) => {\n      return <QuoteCard dialog={quote.dialog} id={quote._id} />;\n    });\n\n    return (\n      <div>\n        {error && <h2 className=\"error-msg\">{error}</h2>}\n        <h2 className=\"words-of\">The words of {hero.name}</h2>\n        <div className=\"quote-cards-container\">{quoteCards}</div>;\n      </div>\n    );\n  }\n  return <h2>Trouble loading quotes...</h2>;\n};\n\nexport default CharacterQuotes;\n","import { useEffect, useState } from \"react\";\nimport { getAllCharacters } from \"../../apiCalls.js\";\nimport { Route, Switch, Link, Redirect } from \"react-router-dom\";\nimport NavBar from \"../NavBar/NavBar\";\nimport Quote from \"../Quote/Quote\";\nimport Characters from \"../Characters/Characters\";\nimport CharacterQuotes from \"../CharacterQuotes/CharacterQuotes\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [allCharacters, setAllCharacters] = useState([]);\n\n  useEffect(() => {\n    getAllCharacters()\n      .then((data) => setAllCharacters(data.docs))\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n    <main>\n      <NavBar />\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <div className=\"entry-container\">\n              <h2>\n                <span>\n                  <img\n                    src=\"https://img.icons8.com/color/48/000000/european-dragon.png\"\n                    alt=\"dragon-icon\"\n                  />\n                </span>\n                Welcome to Trivia at the Green Dragon\n                <span>\n                  <img\n                    src=\"https://img.icons8.com/color/48/000000/european-dragon.png\"\n                    alt=\"dragon-icon\"\n                  />\n                </span>\n              </h2>\n              <h3 className=\"entry-text\">\n                Test your memory and honor our heros of the Third Age\n              </h3>\n              <h3 className=\"entry-text\">best of luck to you!</h3>\n              <Link className=\"link entry-text begin\" to=\"/trivia\">\n                ...Begin...\n              </Link>\n              <Link to=\"/heroes\" className=\" link practice-text\">\n                Click Here to pratice...\n              </Link>\n            </div>\n          )}\n        />\n        <Route\n          exact\n          path=\"/trivia\"\n          render={() => <Quote allCharacters={allCharacters} />}\n        />\n        <Route\n          exact\n          path=\"/heroes\"\n          render={() => <Characters characters={allCharacters} />}\n        />\n        <Route\n          path=\"/heroes/:name\"\n          render={({ match }) => {\n            const hero = allCharacters.find(\n              (character) => character.name === match.params.name\n            );\n            return <CharacterQuotes hero={hero} />;\n          }}\n        />\n      </Switch>\n      <Redirect to={\"/trivia\"} />\n    </main>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst router = (\n  <BrowserRouter>\n    {\" \"}\n    <App />{\" \"}\n  </BrowserRouter>\n);\n\nReactDOM.render(router, document.getElementById(\"root\"));\n\nreportWebVitals();\n"],"sourceRoot":""}